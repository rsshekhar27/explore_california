(function ($) {

	Drupal.behaviors.vca_solr_search = {
		attach: function (context, settings) {
			// Move exposed filter above views header
			$('.section-search .view-filters').insertBefore('.view-vcal-solr-search .view-header');

			/**
		     * Send a 'Search' event to Google Analytics
		     */

			// Facets
			$('.section-search .view-header').once('ga-track-facets', function() {
				$("#facetapi-facet-search-apivcal-node-index-block-search-api-combined-1-wrapper select").on('change', function() {
					vcaTrackSearchFacets('#facetapi-facet-search-apivcal-node-index-block-search-api-combined-1-wrapper');

					if ($(this).hasClass("in-progress")) {
						e.preventDefault();
						return false;
					}

					// disable link and add drupal's default throbber gif
					$(this).addClass("in-progress");
					$(this).parent().parent().append('<div class="ajax-progress ajax-progress-throbber"><div class="throbber">&nbsp;</div></div>');
				});
				$("#facetapi-facet-search-apivcal-node-index-block-field-interests-wrapper select").on('change', function() {
					vcaTrackSearchFacets('#facetapi-facet-search-apivcal-node-index-block-field-interests-wrapper');

					if ($(this).hasClass("in-progress")) {
						e.preventDefault();
						return false;
					}

					// disable link and add drupal's default throbber gif
					$(this).addClass("in-progress");
					$(this).parent().parent().append('<div class="ajax-progress ajax-progress-throbber"><div class="throbber">&nbsp;</div></div>');
				});
			});

			// Main search box
			$('.view-filters #views-exposed-form-vcal-solr-search-page-1').once('ga-track-query', function() {
				$('.view-filters #views-exposed-form-vcal-solr-search-page-1 #edit-submit-vcal-solr-search').click(function() {
					vcaTrackSearch('.view-filters #views-exposed-form-vcal-solr-search-page-1');
				});
				$('.view-filters #views-exposed-form-vcal-solr-search-page-1 #edit-query').bind("enterKey",function(e){
					vcaTrackSearch('.view-filters #views-exposed-form-vcal-solr-search-page-1');
				});
			});

			// Nav bar search box on search page
			$('#nav-main #views-exposed-form-vcal-solr-search-page-1').once('ga-track-query', function() {
				$('#nav-main #views-exposed-form-vcal-solr-search-page-1 #edit-submit-vcal-solr-search').click(function() {
					vcaTrackSearch('#nav-main #views-exposed-form-vcal-solr-search-page-1');
				});
				$('#nav-main #views-exposed-form-vcal-solr-search-page-1 #edit-query').bind("enterKey",function(e){
					vcaTrackSearch('#nav-main #views-exposed-form-vcal-solr-search-page-1');
				});
			});

			// Nav bar search box on non-search pages
			$('#nav-main #views-exposed-form-vcal-solr-search-').once('ga-track-query', function() {
				$('#nav-main #views-exposed-form-vcal-solr-search- #edit-submit-vcal-solr-search').click(function() {
					vcaTrackSearch('#nav-main #views-exposed-form-vcal-solr-search-');
				});
				$('#nav-main #views-exposed-form-vcal-solr-search- #edit-query').bind("enterKey",function(e){
					vcaTrackSearch('#nav-main #views-exposed-form-vcal-solr-search-');
				});
			});

			// Load More button
			$('.view-vcal-solr-search .pager-load-more').once('track-load-more', function() {
				$('.view-vcal-solr-search .pager-load-more a').click(function() {
				  ga('send', 'event', 'Search', 'load more', undefined);
				});
			});

			/**
			 * Send a 'Search' event to Google Analytics with query string
			 */
			var vcaTrackSearch = function(id) {
				var search_term = $(id + ' #edit-query').val();
				ga('send', 'event', 'Search', 'search', search_term);
			}

			/**
			 * Send a 'Search' event to Google Analytics with facet selection
			 */
			var vcaTrackSearchFacets = function(id) {
				var facet_term = $(id + " option:selected").text();
				ga('send', 'event', 'Search', 'facet selection', facet_term);
			}

		}
	};

	$(document).ready(function() {
		var pathname = window.location.pathname;

		if (pathname.indexOf('/search') >= 0) {
			var url = window.location.pathname + window.location.search;
			url = url.replace(/\//gi, "");

			// IE fix
			url = url.replace("&=Search", "");

			var title = document.title;
			var query = $("#views-exposed-form-vcal-solr-search-page-1 #edit-query").val();
			var content = $('.view-vcal-solr-search').html();

			history.replaceState({content: content, query: query, url: url, title: title}, title, url);
		}
	});

	/**
     * Function to build URI and update browser URL
     *
     * Fixes issue with AJAX Facets not working with Views exposed filter to update URI in real-time
     */
	$(document).ajaxComplete(function(event, xhr, settings) {
		var pathname = window.location.pathname;

		if (pathname.indexOf('/search') >= 0) {
			if (settings.url.indexOf('/views/ajax') >= 0) {
				var query = $("#views-exposed-form-vcal-solr-search-page-1 #edit-query").val();
				var region = $("#facetapi-facet-search-apivcal-node-index-block-search-api-combined-1-wrapper option").filter(":selected").val();
				var interest = $("#facetapi-facet-search-apivcal-node-index-block-field-interests-wrapper option").filter(":selected").val();
				var url = '';
				var pushURL = false;

				if (!query.trim()) {
					// No query terms
				}
				else {
					pushURL = true;
					url += '?query=' + query;
				}

				if ($.isNumeric(region)) {
					if (pushURL) {
						url += '&f[]=search_api_combined_1:' + region;
					}
					else {
						pushURL = true;
						url += '?f[]=search_api_combined_1:' + region;
					}
				}

				if ($.isNumeric(interest)) {
					if (pushURL) {
						url += '&f[]=field_interests:' + interest;
					}
					else {
						pushURL = true;
						url += '?f[]=field_interests:' + interest;
					}
				}

				var title = document.title;
				var content = $('.view-vcal-solr-search').html();

				history.pushState({content: content, query: query, url: "search" + url, title: title}, title, "search" + url);
			}
		}
	});

	window.addEventListener("popstate", function(e) {
		var pathname = window.location.pathname;

		if (pathname.indexOf('/search') >= 0) {
			location.reload();
		}
	});

}(jQuery));
;
// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
// http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating

// requestAnimationFrame polyfill by Erik MÃ¶ller. fixes from Paul Irish and Tino Zijdel

// MIT license

(function() {
    var lastTime = 0;
    var vendors = ['ms', 'moz', 'webkit', 'o'];
    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
        window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
        window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] 
                                   || window[vendors[x]+'CancelRequestAnimationFrame'];
    }
 
    if (!window.requestAnimationFrame)
        window.requestAnimationFrame = function(callback, element) {
            var currTime = new Date().getTime();
            var timeToCall = Math.max(0, 16 - (currTime - lastTime));
            var id = window.setTimeout(function() { callback(currTime + timeToCall); }, 
              timeToCall);
            lastTime = currTime + timeToCall;
            return id;
        };
 
    if (!window.cancelAnimationFrame)
        window.cancelAnimationFrame = function(id) {
            clearTimeout(id);
        };
}());;
(function ($, Drupal, window, document, undefined) {

  Drupal.behaviors.alerts = {
    attach: function(context, settings) {
      var alerts = {
        isAnimating: false,

        config: {
          module: "#block-vca-site-alerts",
          alert:  ".node-alert",
          speed:  1
        },

        init: function() {
          alerts.$module = $(alerts.config.module);
          alerts.$alerts = alerts.$module.find(alerts.config.alert);
          alerts.$clones = alerts.$alerts.clone();
  
          if (alerts.$alerts.length) {
            alerts.combinedWidth = alerts.calculateCombinedWidth(alerts.$alerts);

            $(window).on("resize", alerts.resizeHandler).resize();
            $(window).on("scroll", alerts.scrollHandler).scroll();
          }
        },

        calculateCombinedWidth: function($items) {
          var width = 0;

          $items.each(function() {
            width += $(this).innerWidth();
          });

          return width;
        },

        calculateLeftPosition: function($item) {
          var $prev   = $item.prev(),
              leftPos = 0;

          if ($prev.length) {
            leftPos = $prev.position().left + $prev.innerWidth();
          }

          return leftPos;
        },

        setupAlerts: function() {
          var $container = alerts.$alerts.parent();

          alerts.$alerts.remove();
          alerts.$alerts = alerts.$clones.clone().appendTo($container);
          alerts.$alerts.each(function() {
            var $alert  = $(this),
                leftPos = alerts.calculateLeftPosition($alert);

            $alert.css({
              position: "absolute",
              left    : leftPos
            });
          });
        },


        animateAlerts: function() {
          alerts.$alerts.each(function() {
            var $alert  = $(this),
                leftPos = $alert.position().left - alerts.config.speed;

            $alert.css({ left: leftPos });
            
            if (leftPos < 0) {
              if (!$alert.data("is-cloned")) {
                var $clone = $alert.clone();

                $clone
                  .appendTo($alert.parent())
                  .css({ left: alerts.calculateLeftPosition($clone) });

                $alert.data("is-cloned", true);

                alerts.$alerts = alerts.$module.find(alerts.config.alert);
              }
              else if (Math.abs(leftPos) > $alert.innerWidth()) {
                $alert.remove();

                alerts.$alerts = alerts.$module.find(alerts.config.alert);
              }
            }
          });

          alerts.requestID = requestAnimationFrame(alerts.animateAlerts);
        },

        resizeHandler: function(e) {
          var $container     = alerts.$alerts.parent(),
              containerWidth = $container.innerWidth();

          if (alerts.combinedWidth > containerWidth) {
            if (!alerts.isAnimating) {
              alerts.isAnimating = true;

              alerts.setupAlerts();

              alerts.requestID = requestAnimationFrame(alerts.animateAlerts);
            }
          }
          else {
            if (alerts.isAnimating) {
              alerts.isAnimating = false;

              alerts.setupAlerts();

              if (alerts.requestID) {
                cancelAnimationFrame(alerts.requestID);
              }
            }
          }
        },

        scrollHandler: function(e) {
          $("body").toggleClass("is-alerts-visible", $(e.target).scrollTop() < alerts.$module.offset().top);
        }
      };

      $(window).on("load", function() {
        alerts.init();
      });
    }
  };

})(jQuery, Drupal, this, this.document);;
