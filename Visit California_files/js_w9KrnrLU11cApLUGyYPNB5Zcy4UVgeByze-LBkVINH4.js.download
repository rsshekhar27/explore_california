(function ($) {
  "use strict";

  var $window = $(window);

  var vis_index = 0;

  /**
   * Insert a views infinite scroll view into the document after AJAX.
   *
   * @param {object} $new_view The new view coming from the server.
   */
  $.fn.infiniteScrollInsertView = function ($new_view) {
    var $existing_view = this;
    var $existing_content = $existing_view.find('.view-content').children();
    $new_view.find('.view-content').prepend($existing_content);
    $existing_view.replaceWith($new_view);
    $(document).trigger('infiniteScrollComplete', [$new_view, $existing_content]);
  };

  /**
   * Handle the automatic paging based on the scroll amount.
   */
  Drupal.behaviors.views_infinite_scroll_automatic = {
    attach : function(context, settings) {

      var settings = settings.views_infinite_scroll;
      var loadingImg = '<div class="views_infinite_scroll-ajax-loader"><img src="' + settings.img_path + '" alt="loading..."/></div>';

      $('.pager--infinite-scroll.pager--infinite-scroll-auto', context).once().each(function() {
        var $pager = $(this);
        $pager.find('.pager__item').hide();
        if ($pager.find('.pager__item a').length) {
          $pager.append(loadingImg);
        }
        $window.bind('scroll.views_infinite_scroll_' + vis_index, function() {
          if (window.innerHeight + window.pageYOffset > $pager.offset().top - settings.scroll_threshold) {
            $pager.find('.pager__item a').click();
            $window.unbind('scroll.views_infinite_scroll_' + vis_index);
          }
        });
        vis_index++;
      });

    }
  };

})(jQuery);
;
/**
 * @file
 * AddThis javascript actions.
 */

(function ($) {
  Drupal.behaviors.addthis = {
    scriptLoaded: false,

    attach: function(context, settings) {

      // The addthis configuration is not loaded but the settings are passed
      // to do so.
      if (!this.isConfigLoaded() && this.isSettingsLoaded()) {
        // Initialize config.
        this.initConfig();

        // Load widget js.
        if (!this.scriptLoaded) {
          this.loadDomready();
        }
      }
      // The addthis configuration is not loaded but no setting are available
      // to load anything.
      else if(!this.isConfigLoaded() && !this.isSettingsLoaded()) {
        // Do nothing
      }

      // Trigger ready on ajax attach.
      if (context != window.document) {
        Drupal.behaviors.addthis.ajaxLoad(context, settings);
      }

    },

    // Returns if the settings defined by the addthis module are loaded.
    isSettingsLoaded: function () {
      if (typeof Drupal.settings.addthis == 'undefined') {
        return false;
      }
      return true;
    },

    // Returns if the configuration variables needed for widget.js are defined.
    isConfigLoaded: function() {
      if (typeof addthis_config == 'undefined' || typeof addthis_share == 'undefined') {
        return false;
      }
      return true;
    },

    initConfig: function () {
      addthis_config = Drupal.settings.addthis.addthis_config;
      addthis_share = Drupal.settings.addthis.addthis_share;
    },

    // Load the js library when the dom is ready.
    loadDomready: function() {
      // If settings asks for loading the script after the dom is loaded, then
      // load the script here.
      if (!this.scriptLoaded &&
          this.isConfigLoaded() &&
          Drupal.settings.addthis.domready) {
        $.getScript(Drupal.settings.addthis.widget_url, Drupal.behaviors.addthis.scriptReady);
      }
    },

    // Callback for loading the widget.js dynamically.
    scriptReady: function () {
      this.scriptLoaded = true;
    },

    // Called when a ajax request returned.
    ajaxLoad: function(context, settings) {
      if (typeof window.addthis != 'undefined' &&
          typeof window.addthis.toolbox == 'function')
      {
          window.addthis.toolbox('.addthis_toolbox');
      }
    }

  };

  // This load the config in time to run any addthis functionality.
  if (Drupal.behaviors.addthis.isConfigLoaded()) {
    addthis_config = Drupal.settings.addthis.addthis_config;
    addthis_share = Drupal.settings.addthis.addthis_share;
  }

  // Document ready in case we want to load AddThis into the dom after every
  // thing is loaded.
  //
  // Is executed once after the attach happened.
  $(document).ready(function() {
    Drupal.behaviors.addthis.loadDomready();
  });

}(jQuery));
;
/**
 * @file
 * VCA Sense and Serve JavaScript codes.
 */
var _aaq = window._aaq || (window._aaq = []);
var evergageAccount = Drupal.settings.vcaSite.evergage.account;
var evergageDataset = Drupal.settings.vcaSite.evergage.dataset;
_aaq.push(['setEvergageAccount', evergageAccount], ['setDataset', evergageDataset], ['setUseSiteConfig', true]);

(function(){
  var d = document, g = d.createElement('script'), s = d.getElementsByTagName('script')[0];
  g.type = 'text/javascript'; g.defer = true; g.async = true;
  g.src = document.location.protocol + '//cdn.evergage.com/beacon/'
    + evergageAccount + '/' + evergageDataset + '/scripts/evergage.min.js';
  s.parentNode.insertBefore(g, s);
})();
;
(function ($, Drupal, window, document, undefined) {

  Drupal.behaviors.shareButtons = {
    attach: function(context, settings) {
      var shareButtons = {
        isActive: false,

        config: {
          triggers:       ".field-name-field-share-buttons",
          duration:       250,
          //cssFile:        "widget002.old.32.css",
          editorialFbBtn: ".editorial-button-facebook"
        },

        init: function() {
          shareButtons.$triggers = $(shareButtons.config.triggers);

          if (shareButtons.$triggers.length) {
            // Determind which sprite AddThis is using.
            // $(window).on("load", function() {
            //   $("link").each(function() {
            //     if ($(this).attr("href").indexOf(shareButtons.config.cssFile) > -1) {
            //       shareButtons.$triggers.addClass("long-sprite");
            //     }
            //   });
            // });

            shareButtons.$triggers.each(function() {
              var $trigger   = $(this),
                  $container = $trigger.find(".addthis_toolbox:eq(0)");

              $container.show().css({top: 0});
            }).once('jquery-once-toggle-share-buttons').on("click", shareButtons.toggleButtons);

          }

          shareButtons.$editorialFbBtn = $(shareButtons.config.editorialFbBtn);

          if (shareButtons.$editorialFbBtn.length && Drupal.settings.shareButtons.fbAppId) {
            shareButtons.initFbSDK();

            $(window).on("load", function() {
              shareButtons.$editorialFbBtn.children("span").on("click", shareButtons.showFbFeedDialog);
            });
          }

          // Expand by default.
          if (shareButtons.$triggers.length) {
            shareButtons.$triggers
              .each(function() {
                var $trigger   = $(this);

                if (!$trigger.hasClass("active")) {
                  $trigger.trigger('click');
                }
              });
          }
        },

        toggleButtons: function(e) {
          var $trigger = $(e.target);

          if ($trigger.hasClass("active")) {
            var topPos = -$trigger.innerHeight();

            $trigger
              .find(".addthis_toolbox:eq(0)")
              .transit({top: topPos}, shareButtons.config.duration, function() {
                $trigger.removeClass("active");
              });
          }
          else {
            $trigger
              .addClass("active")
              .find(".addthis_toolbox:eq(0)")
              .transit({top: 0}, shareButtons.config.duration);
          }
        },

        initFbSDK: function() {
          window.fbAsyncInit = function() {
            FB.init({
              appId:   Drupal.settings.shareButtons.fbAppId,
              xfbml:   true,
              version: 'v2.0'
            });
          };

          (function(d, s, id){
            var js, fjs = d.getElementsByTagName(s)[0];
            if (d.getElementById(id)) {return;}
            js = d.createElement(s); js.id = id;
            js.src = "//connect.facebook.net/en_US/sdk.js";
            fjs.parentNode.insertBefore(js, fjs);
          }(document, 'script', 'facebook-jssdk'));
        },

        showFbFeedDialog: function(e) {
          e.stopPropagation();
          e.preventDefault();

          var $button = $(e.target).closest(".addthis_button_facebook");

          FB.ui({
            method: "feed",
            name:        $button.data("share-title"),
            description: $button.data("share-desc"),
            link:        $button.data("share-url"),
            picture:     $button.data("share-image")
            },

            function(response) {
              if (response && response.post_id) {
                //alert('Post was published.');
              } else {
                // console.log(response);
              }
            }
          );
        }
      };

      shareButtons.init();
    }
  };

})(jQuery, Drupal, this, this.document);
;
